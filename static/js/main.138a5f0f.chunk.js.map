{"version":3,"sources":["components/Post.js","components/Comment.js","components/CommentList.js","components/User.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","react_default","a","createElement","className","title","text","Comment","name","href","commentEmail","commentText","CommentList","comments","map","comment","components_Comment","key","email","body","User","userName","address","PostList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loaded","requested","filter","loadItems","bind","assertThisInitialized","filterChanged","url","fetch","then","res","json","_this2","setState","Promise","all","loadApi","_ref","_ref2","slicedToArray","posts","users","post","objectSpread","user","find","userId","id","postId","event","target","value","_this3","type","placeholder","onChange","item","includes","components_Post","components_User","street","components_CommentList","onClick","Component","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.138a5f0f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Post(props) {\n  return (\n    <div className='posts'>\n      <h2>{props.title}</h2>\n      <p>{props.text}</p>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\n\nfunction Comment(props) {\n  return (\n    <div className='comments'>\n      <div>Name: <strong>{props.name}</strong></div>\n      <div>Email: <a href={props.commentEmail}>{props.commentEmail}</a></div>\n      <p>{props.commentText}</p>\n    </div>\n  );\n}\n\nexport default Comment;\n","import React from 'react';\nimport Comment from \"./Comment\";\n\nfunction CommentList(props) {\n  return (\n    <div>\n      {props.comments.map(comment =>\n        <Comment\n          key={comment.name}\n          name={comment.name}\n          commentEmail={comment.email}\n          commentText={comment.body}\n        />)}\n    </div>\n  );\n}\n\nexport default CommentList;\n","import React from 'react';\n\nfunction User(props) {\n  return (\n    <div className='users'>\n    <section className='users_name'>\n     <i><h3>{props.userName}</h3></i>\n     <i><div>Email: <a href={props.email}>{props.email}</a></div></i>\n     </section>\n      <div><i>Address: </i>{props.address}</div>\n    </div>\n  );\n}\n\nexport default User;\n","import React, {Component} from 'react';\nimport Post from \"./Post\";\nimport CommentList from \"./CommentList\";\nimport User from \"./User\";\nimport './envelope.css';\n\nclass PostList extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: [],\n      loaded:false,\n      requested: false,\n      filter: ''\n    };\n    this.loadItems = this.loadItems.bind(this);\n    this.filterChanged = this.filterChanged.bind(this);\n  }\n  loadApi(url) {\n    return fetch(url)\n      .then(res => res.json())\n      .then(data => data);\n  }\n\n\n  loadItems() {\n\n    this.setState({\n      requested: true,\n    });\n\n    Promise.all([\n      this.loadApi('https://jsonplaceholder.typicode.com/posts'),\n      this.loadApi('https://jsonplaceholder.typicode.com/users'),\n      this.loadApi('https://jsonplaceholder.typicode.com/comments')\n    ])\n      .then(([posts, users, comments]) => this.setState({\n        data: posts.map(post => ({\n          ...post,\n          user: users.find(user => post.userId === user.id),\n          comments:comments.filter(comment => post.id === comment.postId)\n        })),\n        loaded:true\n      }))\n  }\n\n  filterChanged(event) {\n    this.setState({\n      filter: event.target.value,\n    });\n  }\n\n  render() {\n\n    if (!this.state.requested) {\n      return (\n      <section className=\"circle\">\n          <div className=\"envelope\" onClick={this.loadItems} />\n       </section>)\n    }else if(this.state.loaded) {\n      return (\n        <div className='list'>\n          <input className='list_input' type=\"text\" placeholder=\"search\" onChange={this.filterChanged} />\n          {this.state.data.map(item =>\n            item.title.includes(this.state.filter) || item.body.includes(this.state.filter) ?\n            (<section>\n              <Post\n                key={item.title}\n                title={item.title}\n                text={item.body}\n              />\n              <User\n                key={item.user.id}\n                userName={item.user.name}\n                email={item.user.email}\n                address={item.user.address.street}\n              />\n              <CommentList comments={item.comments}/>\n            </section>): null)}\n        </div>\n      )\n    }else{\n      return <div>Loading....</div>;\n      }\n  }\n}\n\nexport default PostList;\n","import React from 'react';\nimport './App.css';\nimport PostList from \"./components/PostList\";\n\nfunction App() {\n  return (\n      <PostList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}